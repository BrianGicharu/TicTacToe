/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.concurrent.*;
import java.util.concurrent.TimeUnit;
import javax.swing.*;

/**
 * @author briangicharu
 */

public class Window extends javax.swing.JFrame {
    // Custom Variables
    private final String gitUrl = "https://github.com/BrianGicharu/TicTacToe.git";
    public boolean playerClicked=false, vsHuman=true, gameOver=false, gameStarted=false;
    private JLabel[] gameLabels = new JLabel[9];
    private static int count = 1;
    private int min=0, sec =0, mSec=0;
    private Timer stopWatch;
    private Thread thread;
  
    public Window() {
        JLabel gameLabels[] = {gLabel_1,gLabel_2,gLabel_3,gLabel_4,gLabel_5, gLabel_6,gLabel_7,gLabel_8,gLabel_9};
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsJPanel = new javax.swing.JPanel();
        gLabel_2 = new javax.swing.JLabel();
        gLabel_3 = new javax.swing.JLabel();
        gLabel_4 = new javax.swing.JLabel();
        gLabel_5 = new javax.swing.JLabel();
        gLabel_6 = new javax.swing.JLabel();
        gLabel_7 = new javax.swing.JLabel();
        gLabel_8 = new javax.swing.JLabel();
        gLabel_1 = new javax.swing.JLabel();
        gLabel_9 = new javax.swing.JLabel();
        resetGameBtn = new javax.swing.JButton();
        ContactInformation = new javax.swing.JLabel();
        playerSelectorDropdown = new javax.swing.JComboBox<>();
        winnerJlabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        timeDigitsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerMovesHistory = new javax.swing.JTextArea();
        winnerColorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tic Tac Toe");
        setResizable(false);

        tabsJPanel.setBackground(new java.awt.Color(204, 255, 255));

        gLabel_2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_2.setOpaque(true);
        gLabel_2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_3.setOpaque(true);
        gLabel_3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_4.setOpaque(true);
        gLabel_4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_5.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_5.setOpaque(true);
        gLabel_5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_6.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_6.setOpaque(true);
        gLabel_6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_7.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_7.setOpaque(true);
        gLabel_7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_8.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_8.setOpaque(true);
        gLabel_8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_1.setOpaque(true);
        gLabel_1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        gLabel_9.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gLabel_9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gLabel_9.setOpaque(true);
        gLabel_9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gLabelsClicked(evt);
            }
        });

        javax.swing.GroupLayout tabsJPanelLayout = new javax.swing.GroupLayout(tabsJPanel);
        tabsJPanel.setLayout(tabsJPanelLayout);
        tabsJPanelLayout.setHorizontalGroup(
            tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabsJPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gLabel_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabsJPanelLayout.createSequentialGroup()
                        .addComponent(gLabel_2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gLabel_3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabsJPanelLayout.createSequentialGroup()
                        .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gLabel_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gLabel_5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gLabel_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gLabel_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(7, 7, 7))
        );
        tabsJPanelLayout.setVerticalGroup(
            tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabsJPanelLayout.createSequentialGroup()
                .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gLabel_2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gLabel_4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gLabel_6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(gLabel_7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(gLabel_8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(gLabel_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resetGameBtn.setBackground(new java.awt.Color(204, 0, 51));
        resetGameBtn.setFont(new java.awt.Font("Digital-7 Mono", 1, 14)); // NOI18N
        resetGameBtn.setText("RESET GAME");
        resetGameBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetGameBtnMouseClicked(evt);
            }
        });

        ContactInformation.setBackground(new java.awt.Color(204, 255, 255));
        ContactInformation.setForeground(new java.awt.Color(0, 0, 153));
        ContactInformation.setText("https://github.com/BrianGicharu/TicTacToe");
        ContactInformation.setToolTipText("Click to Visit the Developer's GitHub Repository");
        ContactInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ContactInformationMouseClicked(evt);
            }
        });

        playerSelectorDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Player vs Player", "Player vs AI", "Internet MultiPlayer" }));
        playerSelectorDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                playerSelectorDropdownItemStateChanged(evt);
            }
        });

        winnerJlabel.setBackground(new java.awt.Color(255, 204, 204));
        winnerJlabel.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        winnerJlabel.setText("No Winner Yet!");
        winnerJlabel.setOpaque(true);

        timeLabel.setText("Time");

        timeDigitsLabel.setForeground(new java.awt.Color(0, 51, 153));
        timeDigitsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeDigitsLabel.setOpaque(true);

        jScrollPane1.setToolTipText("Player Moves History");

        playerMovesHistory.setEditable(false);
        playerMovesHistory.setColumns(5);
        playerMovesHistory.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        playerMovesHistory.setRows(20);
        jScrollPane1.setViewportView(playerMovesHistory);

        winnerColorLabel.setBackground(new java.awt.Color(0, 255, 204));
        winnerColorLabel.setText("   ");
        winnerColorLabel.setMaximumSize(new java.awt.Dimension(9, 12));
        winnerColorLabel.setMinimumSize(new java.awt.Dimension(9, 12));
        winnerColorLabel.setOpaque(true);
        winnerColorLabel.setPreferredSize(new java.awt.Dimension(9, 12));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ContactInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerSelectorDropdown, 0, 0, Short.MAX_VALUE)
                            .addComponent(resetGameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(timeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeDigitsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(winnerJlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(winnerColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)))
                                .addGap(2, 2, 2))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(winnerJlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                            .addComponent(winnerColorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(playerSelectorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeLabel)
                            .addComponent(timeDigitsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(tabsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 263, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(ContactInformation)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ContactInformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContactInformationMouseClicked
        // Open the confirmation dialog box
        if(JOptionPane.showConfirmDialog(null,"Visit \"Tic Tac Toe\" Repository?", "Confirm Action", JOptionPane.OK_CANCEL_OPTION)==0)
            visitSite(URI.create(gitUrl));
    }//GEN-LAST:event_ContactInformationMouseClicked

    private void resetGameBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetGameBtnMouseClicked
        // Clicking the mouse on "Reset" button
        flushGameText();
        timeDigitsLabel.setText("00 : 00 :  00");
        stopWatch.stop();
    }//GEN-LAST:event_resetGameBtnMouseClicked

    private void gLabelsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gLabelsClicked
        gameStarted=true;
        //<editor-fold defaultstate="collapsed" desc="==timer==">
//        thread = new Thread(){
//            public void run(){
//                
//            }
//        //if(!gameOver)stopWatch.start();
//        };
        
        
//        if(!gameOver)stopWatch.start();
        //</editor-fold>
        
        if(gameStarted && !gameOver){
            stopWatch = new Timer(10, new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e) {
                    if(mSec > 100){
                        sec+=1;
                        mSec=0;
                    }
                    if(sec > 59){
                        min += 1;
                        sec = 0;
                    }
                    timeDigitsLabel.setText(String.format("%02d : %02d : %02d",min,sec,mSec));
                    mSec+=1;
                }
            });
            stopWatch.start();
        }
        JLabel gameLabels[] = {gLabel_1, gLabel_2, gLabel_3, gLabel_4,gLabel_5,gLabel_6,gLabel_7, gLabel_8, gLabel_9};
        if(!(((JLabel)evt.getSource()).getText().equals("O")) && !(((JLabel)evt.getSource()).getText().equals("X")) && !(gameOver)){
            if(vsHuman){
                if(!playerClicked) {
                    ((JLabel)evt.getSource()).setText("X");
                    ((JLabel)evt.getSource()).setBackground(Color.RED);
                    playerClicked = true;

                }else if(playerClicked){
                    ((JLabel)evt.getSource()).setText("O");
                    ((JLabel)evt.getSource()).setBackground(Color.BLUE);
                    playerClicked = false;
                }
            }else if(!vsHuman){
                // human's turn
                ((JLabel)evt.getSource()).setText("X");
                ((JLabel)evt.getSource()).setBackground(Color.RED);            
                // terminator's turn
                ScheduledExecutorService sc = Executors.newSingleThreadScheduledExecutor();
                sc.schedule (()->{
                    if(!gameOver){
                    int x = randomizeIfNotEmpty(gameLabels);
                    gameLabels[x].setText("O");  
                    gameLabels[x].setBackground(Color.BLUE);
                    renderTextArea();
                    winScenario();
                    }
                }, 1250, TimeUnit.MILLISECONDS);
            }
            renderTextArea();
            winScenario();
        }if(gameOver)stopWatch.stop();        
    }//GEN-LAST:event_gLabelsClicked

    private void playerSelectorDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_playerSelectorDropdownItemStateChanged
        switch (((JComboBox)evt.getSource()).getSelectedItem().toString()) {
            case "Player vs Player":
                vsHuman = true;
                flushGameText();
                break;
            case "Player vs AI":
                vsHuman = false;
                flushGameText();
                break;
            case "Internet MultiPlayer":
                JOptionPane.showConfirmDialog(null, 
                        "Bingo! you're a great player\nThis feature is coming soon.\nStay tuned!",
                        "Coming soon",JOptionPane.PLAIN_MESSAGE);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_playerSelectorDropdownItemStateChanged
    
    // Editable methods begin here
    private void flushGameText(){
        JLabel gameLabels[] = {
            gLabel_1, gLabel_2, gLabel_3,
            gLabel_4, gLabel_5, gLabel_6,
            gLabel_7, gLabel_8, gLabel_9
        };
        for(JLabel content:gameLabels){
            content.setText("");
            content.setBackground(new Color(240,240,240));
        }
        count=0;
        winnerJlabel.setText("No Winner Yet");
        winnerColorLabel.setBackground(new Color(0,255,204));
        renderTextArea();
        playerMovesHistory.setText(" _MOVES HISTORY_\n");
        winScenario();
    }
    private int randomizeIfNotEmpty(JLabel[] lebo){
        // true means the conditional test subject is not empty -- recursion should re-run the random num generator
        int var = (int)(Math.floor(Math.random()*(9)));
        if(!(lebo[var].getText()).isEmpty()){
            return randomizeIfNotEmpty(lebo);
        }else{
            return var;
        }
    }
    private void renderTextArea(){
        String move = String.format(" ------ %202d ------\n |%s|%s|%s|\n |%s|%s|%s|\n |%s|%s|%s|\n ++++++++++++++++\n",
            count,
            gLabel_1.getText().isEmpty()?"    ":" "+gLabel_1.getText()+"  ",
            gLabel_2.getText().isEmpty()?"    ":" "+gLabel_2.getText()+"  ",
            gLabel_3.getText().isEmpty()?"    ":" "+gLabel_3.getText()+"  ",
            gLabel_4.getText().isEmpty()?"    ":" "+gLabel_4.getText()+"  ",
            gLabel_5.getText().isEmpty()?"    ":" "+gLabel_5.getText()+"  ",
            gLabel_6.getText().isEmpty()?"    ":" "+gLabel_6.getText()+"  ",
            gLabel_7.getText().isEmpty()?"    ":" "+gLabel_7.getText()+"  ",
            gLabel_8.getText().isEmpty()?"    ":" "+gLabel_8.getText()+"  ",
            gLabel_9.getText().isEmpty()?"    ":" "+gLabel_9.getText()+"  ");
        count++;
        playerMovesHistory.setText(playerMovesHistory.getText()+move);
    }
    
    private void winScenario(){
        //<editor-fold defaultstate="collapsed" desc=" Win Scenario rough design ">
        /*
        * gLabel_1, gLabel_2, gLabel_3,
        * gLabel_4, gLabel_5, gLabel_6,
        * gLabel_7, gLabel_8, gLabel_9
        *                                     ___________________
        * |1|2|3|                             | `1-2-3   `7-8-9 |
        * |4|5|6|   Winning combinations -->  | `3-6-9   `7-5-3 |
        * |7|8|9|                             | `1-4-7   `1-5-9 |
        *                                     | `4-5-6   `2-5-8 |
        *                                     -------------------
        */
        //</editor-fold>
        
        // gameplay quit or exit condition (mtu akishinda) ama gameover
        if(winCombinationComparator(gLabel_1.getText(), gLabel_2.getText(), gLabel_3.getText())){
            winnerJlabel.setText("Player "+gLabel_1.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_1.getBackground());
            gameOver = true;
        }
        else if(winCombinationComparator(gLabel_7.getText(), gLabel_8.getText(), gLabel_9.getText())){
            winnerJlabel.setText("Player "+gLabel_7.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_7.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_3.getText(), gLabel_6.getText(), gLabel_9.getText())){
            winnerJlabel.setText("Player "+gLabel_3.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_3.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_7.getText(), gLabel_5.getText(), gLabel_3.getText())){
            winnerJlabel.setText("Player "+gLabel_7.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_7.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_1.getText(), gLabel_5.getText(), gLabel_9.getText())){
            winnerJlabel.setText("Player "+gLabel_1.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_1.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_4.getText(), gLabel_5.getText(), gLabel_6.getText())){
            winnerJlabel.setText("Player "+gLabel_4.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_4.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_2.getText(), gLabel_5.getText(), gLabel_8.getText())){
            winnerJlabel.setText("Player "+gLabel_2.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_2.getBackground());
            gameOver = true;
        }else if(winCombinationComparator(gLabel_1.getText(), gLabel_4.getText(), gLabel_7.getText())){
            winnerJlabel.setText("Player "+gLabel_1.getText()+" WINS!!");
            winnerColorLabel.setBackground(gLabel_1.getBackground());
            gameOver = true;  
        }else{
            gameOver = false;
        }
    }
    
    public boolean winCombinationComparator(String a, String b, String c){
        return (a.equals(b) && b.equals(c)) && (!a.isEmpty() || !b.isEmpty() || !c.isEmpty());
    }
    
    @SuppressWarnings("CallToPrintStackTrace")
    private void visitSite(URI url) {
        try{
            Desktop.getDesktop().browse(url);
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Nimbus look and feel(GU) seting ">
        
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        EventQueue.invokeLater(() -> {
            new Window().setVisible(true);
        });
    }
    //<editor-fold defaultstate="collapsed" desc="GUI generated vars">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ContactInformation;
    private javax.swing.JLabel gLabel_1;
    private javax.swing.JLabel gLabel_2;
    private javax.swing.JLabel gLabel_3;
    private javax.swing.JLabel gLabel_4;
    private javax.swing.JLabel gLabel_5;
    private javax.swing.JLabel gLabel_6;
    private javax.swing.JLabel gLabel_7;
    private javax.swing.JLabel gLabel_8;
    private javax.swing.JLabel gLabel_9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea playerMovesHistory;
    private javax.swing.JComboBox<String> playerSelectorDropdown;
    private javax.swing.JButton resetGameBtn;
    private javax.swing.JPanel tabsJPanel;
    private javax.swing.JLabel timeDigitsLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel winnerColorLabel;
    private javax.swing.JLabel winnerJlabel;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
